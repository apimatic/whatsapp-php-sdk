<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Controllers;

use WhatsAppCloudAPILib\Exceptions\ApiException;
use WhatsAppCloudAPILib\ConfigurationInterface;
use WhatsAppCloudAPILib\ApiHelper;
use WhatsAppCloudAPILib\Models;
use WhatsAppCloudAPILib\Http\HttpRequest;
use WhatsAppCloudAPILib\Http\HttpResponse;
use WhatsAppCloudAPILib\Http\HttpMethod;
use WhatsAppCloudAPILib\Http\HttpContext;
use WhatsAppCloudAPILib\Http\HttpCallBack;
use Unirest\Request;

class PhoneNumbersController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Used to verify a phone number's ownership. After you have received a SMS or Voice request code for
     * verification, you need to verify the code that was sent to you.
     *
     * @param string $phoneNumberID
     * @param string $code The code you received after calling FROM_PHONE_NUMBER_ID/request_code.
     *
     * @return Models\SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function verifyCode(string $phoneNumberID, string $code): Models\SuccessResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}/verify_code';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID' => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        //prepare parameters
        $_parameters = [
            'code'            => $code
        ];

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post(
                $_httpRequest->getQueryUrl(),
                $_httpRequest->getHeaders(),
                Request\Body::Form($_parameters)
            );
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SuccessResponse');
    }

    /**
     * When you query all the phone numbers for a WhatsApp Business Account, each phone number has an id.
     * You can directly query for a phone number using this id.
     *
     * @param string $phoneNumberID
     *
     * @return Models\GetPhoneNumberByIDResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPhoneNumberByID(string $phoneNumberID): Models\GetPhoneNumberByIDResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID' => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'GetPhoneNumberByIDResponse');
    }

    /**
     * Used to request a code to verify a phone number's ownership. You need to verify the phone number
     * you want to use to send messages to your customers. Phone numbers must be verified through SMS/voice
     * call. The verification process can be done through the Graph API calls specified below.
     *
     * @param string $phoneNumberID
     * @param string $codeMethod Chosen method for verification.
     * @param string $locale Your locale. For example: "en_US".
     *
     * @return Models\SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function requestVerificationCode(
        string $phoneNumberID,
        string $codeMethod,
        string $locale
    ): Models\SuccessResponse {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}/request_code';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID' => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        //prepare parameters
        $_parameters = [
            'code_method'     => Models\RequestVerificationCodeMethodEnum::checkValue($codeMethod),
            'locale'          => $locale
        ];

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post(
                $_httpRequest->getQueryUrl(),
                $_httpRequest->getHeaders(),
                Request\Body::Form($_parameters)
            );
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SuccessResponse');
    }
}
