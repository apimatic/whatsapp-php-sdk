<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Controllers;

use WhatsAppCloudAPILib\Exceptions\ApiException;
use WhatsAppCloudAPILib\ConfigurationInterface;
use WhatsAppCloudAPILib\ApiHelper;
use WhatsAppCloudAPILib\Models;
use WhatsAppCloudAPILib\Http\HttpRequest;
use WhatsAppCloudAPILib\Http\HttpResponse;
use WhatsAppCloudAPILib\Http\HttpMethod;
use WhatsAppCloudAPILib\Http\HttpContext;
use WhatsAppCloudAPILib\Http\HttpCallBack;
use Unirest\Request;

class MediaController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * This endpoint can be used for deleting a media object.
     *
     * @param string $mediaID Media object ID from either uploading media endpoint or media message
     *        Webhooks
     *
     * @return Models\SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteMedia(string $mediaID): Models\SuccessResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Media-ID}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Media-ID' => $mediaID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::delete($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SuccessResponse');
    }

    /**
     * To retrieve your mediaâ€™s URL, make a request to this endpoint. Later, you can use this URL to
     * download the media file.
     *
     * @param string $mediaID Media object ID from either uploading media endpoint or media message
     *        Webhooks
     *
     * @return Models\RetrieveMediaURLResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retrieveMediaURL(string $mediaID): Models\RetrieveMediaURLResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Media-ID}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Media-ID' => $mediaID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'RetrieveMediaURLResponse');
    }

    /**
     * Used to upload media. All media files sent through this endpoint are encrypted and persist for 30
     * days.
     *
     * @param string $phoneNumberID
     * @param string $messagingProduct Messaging service used for the request. In this case, use
     *        whatsapp.
     * @param string $file Path to the file stored in your local directory. For example:
     *        "@/local/path/file.jpg".
     * @param string $type Type of media file being uploaded. See Supported Media Types for more
     *        information.
     *
     *        Supported options for images are: `image/jpeg`, `image/png`
     *
     *        Supported options for documents are: `text/plain`, `application/pdf`,
     *        `application/vnd.ms-powerpoint`, `application/msword`, `application/vnd.ms-excel`,
     *        `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
     *        `application/vnd.openxmlformats-officedocument.presentationml.presentation`,
     *        `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     *        Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`,
     *        `audio/ogg`, `audio/opus`
     *
     *        Supported options for video are: `video/mp4`, `video/3gp`
     *
     *        Supported options for stickers are: `image/webp`
     *
     * @return Models\UploadMedia Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadMedia(
        string $phoneNumberID,
        string $messagingProduct,
        string $file,
        string $type
    ): Models\UploadMedia {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}/media';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID'   => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'      => self::$userAgent,
            'Accept'          => 'application/json'
        ];

        //prepare parameters
        $_parameters = [
            'messaging_product' => $messagingProduct,
            'file'              => $file,
            'type'              => $type
        ];

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post(
                $_httpRequest->getQueryUrl(),
                $_httpRequest->getHeaders(),
                Request\Body::Form($_parameters)
            );
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'UploadMedia');
    }
}
