<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Controllers;

use WhatsAppCloudAPILib\Exceptions\ApiException;
use WhatsAppCloudAPILib\ConfigurationInterface;
use WhatsAppCloudAPILib\ApiHelper;
use WhatsAppCloudAPILib\Models;
use WhatsAppCloudAPILib\Http\HttpRequest;
use WhatsAppCloudAPILib\Http\HttpResponse;
use WhatsAppCloudAPILib\Http\HttpMethod;
use WhatsAppCloudAPILib\Http\HttpContext;
use WhatsAppCloudAPILib\Http\HttpCallBack;
use Unirest\Request;

class RegistrationController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Used to register a phone number or to migrate WhatsApp Business Accounts from a current On-Premises
     * deployment to the new Cloud-Based API. Business Solution Providers (BSPs) must authenticate
     * themselves with an access token with the whatsapp_business_management permission.
     *
     * @param string $phoneNumberID
     * @param Models\RegisterPhoneRequest $body
     *
     * @return Models\SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function registerPhone(string $phoneNumberID, Models\RegisterPhoneRequest $body): Models\SuccessResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}/register';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID' => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SuccessResponse');
    }

    /**
     * Used to deregister a phone number. Deregister phone removes a previously registered phone. You can
     * always re-register your phone using by repeating the registration process. Business Solution
     * Providers (BSPs) must authenticate themselves with an access token with the
     * whatsapp_business_management permission.
     *
     * @param string $contentType
     * @param string $phoneNumberID
     *
     * @return Models\SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deregisterPhone(string $contentType, string $phoneNumberID): Models\SuccessResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/{Phone-Number-ID}/deregister';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'Phone-Number-ID' => $phoneNumberID,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => Models\ContentTypeEnum::checkValue($contentType)
        ];

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SuccessResponse');
    }
}
