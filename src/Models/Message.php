<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class Message implements \JsonSerializable
{
    /**
     * @var Audio|null
     */
    private $audio;

    /**
     * @var Contact[]|null
     */
    private $contacts;

    /**
     * @var Document|null
     */
    private $document;

    /**
     * @var Image|null
     */
    private $image;

    /**
     * @var Interactive|null
     */
    private $interactive;

    /**
     * @var Location|null
     */
    private $location;

    /**
     * @var string
     */
    private $messagingProduct;

    /**
     * @var string|null
     */
    private $recipientType = 'individual';

    /**
     * @var Sticker|null
     */
    private $sticker;

    /**
     * @var Template|null
     */
    private $template;

    /**
     * @var Text|null
     */
    private $text;

    /**
     * @var string
     */
    private $to;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var Video|null
     */
    private $video;

    /**
     * @param string $messagingProduct
     * @param string $to
     */
    public function __construct(string $messagingProduct, string $to)
    {
        $this->messagingProduct = $messagingProduct;
        $this->to = $to;
    }

    /**
     * Returns Audio.
     * A media object containing audio. Required when type=audio.
     */
    public function getAudio(): ?Audio
    {
        return $this->audio;
    }

    /**
     * Sets Audio.
     * A media object containing audio. Required when type=audio.
     *
     * @maps audio
     */
    public function setAudio(?Audio $audio): void
    {
        $this->audio = $audio;
    }

    /**
     * Returns Contacts.
     * A contact object. Required when type=contacts.
     *
     * @return Contact[]|null
     */
    public function getContacts(): ?array
    {
        return $this->contacts;
    }

    /**
     * Sets Contacts.
     * A contact object. Required when type=contacts.
     *
     * @maps contacts
     *
     * @param Contact[]|null $contacts
     */
    public function setContacts(?array $contacts): void
    {
        $this->contacts = $contacts;
    }

    /**
     * Returns Document.
     * A media object containing a document. Required when type=document.
     */
    public function getDocument(): ?Document
    {
        return $this->document;
    }

    /**
     * Sets Document.
     * A media object containing a document. Required when type=document.
     *
     * @maps document
     */
    public function setDocument(?Document $document): void
    {
        $this->document = $document;
    }

    /**
     * Returns Image.
     * A media object containing an image. Required when type=image.
     */
    public function getImage(): ?Image
    {
        return $this->image;
    }

    /**
     * Sets Image.
     * A media object containing an image. Required when type=image.
     *
     * @maps image
     */
    public function setImage(?Image $image): void
    {
        $this->image = $image;
    }

    /**
     * Returns Interactive.
     * This option is used to send List Messages and Reply Buttons. The components of each interactive
     * object generally follow a consistent pattern: header, body, footer, and action. Required when
     * type=interactive.
     */
    public function getInteractive(): ?Interactive
    {
        return $this->interactive;
    }

    /**
     * Sets Interactive.
     * This option is used to send List Messages and Reply Buttons. The components of each interactive
     * object generally follow a consistent pattern: header, body, footer, and action. Required when
     * type=interactive.
     *
     * @maps interactive
     */
    public function setInteractive(?Interactive $interactive): void
    {
        $this->interactive = $interactive;
    }

    /**
     * Returns Location.
     * A location object. Required when type=location.
     */
    public function getLocation(): ?Location
    {
        return $this->location;
    }

    /**
     * Sets Location.
     * A location object. Required when type=location.
     *
     * @maps location
     */
    public function setLocation(?Location $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns Messaging Product.
     * Messaging service used for the request.
     */
    public function getMessagingProduct(): string
    {
        return $this->messagingProduct;
    }

    /**
     * Sets Messaging Product.
     * Messaging service used for the request.
     *
     * @required
     * @maps messaging_product
     */
    public function setMessagingProduct(string $messagingProduct): void
    {
        $this->messagingProduct = $messagingProduct;
    }

    /**
     * Returns Recipient Type.
     * Currently, you can only send messages to individuals.
     */
    public function getRecipientType(): ?string
    {
        return $this->recipientType;
    }

    /**
     * Sets Recipient Type.
     * Currently, you can only send messages to individuals.
     *
     * @maps recipient_type
     */
    public function setRecipientType(?string $recipientType): void
    {
        $this->recipientType = $recipientType;
    }

    /**
     * Returns Sticker.
     * A media object containing a sticker. Currently, we support inbound both and outbound stickers: For
     * outbound, we only support static third-party stickers. For inbound, we support all types of stickers.
     * The sticker needs to be 512x512 pixels and the file’s size needs to be less than 100 KB. Required
     * when type=sticker.
     */
    public function getSticker(): ?Sticker
    {
        return $this->sticker;
    }

    /**
     * Sets Sticker.
     * A media object containing a sticker. Currently, we support inbound both and outbound stickers: For
     * outbound, we only support static third-party stickers. For inbound, we support all types of stickers.
     * The sticker needs to be 512x512 pixels and the file’s size needs to be less than 100 KB. Required
     * when type=sticker.
     *
     * @maps sticker
     */
    public function setSticker(?Sticker $sticker): void
    {
        $this->sticker = $sticker;
    }

    /**
     * Returns Template.
     * A template object. Required when type=template.
     */
    public function getTemplate(): ?Template
    {
        return $this->template;
    }

    /**
     * Sets Template.
     * A template object. Required when type=template.
     *
     * @maps template
     */
    public function setTemplate(?Template $template): void
    {
        $this->template = $template;
    }

    /**
     * Returns Text.
     * Required for text messages.
     */
    public function getText(): ?Text
    {
        return $this->text;
    }

    /**
     * Sets Text.
     * Required for text messages.
     *
     * @maps text
     */
    public function setText(?Text $text): void
    {
        $this->text = $text;
    }

    /**
     * Returns To.
     * WhatsApp ID or phone number for the person you want to send a message to.
     */
    public function getTo(): string
    {
        return $this->to;
    }

    /**
     * Sets To.
     * WhatsApp ID or phone number for the person you want to send a message to.
     *
     * @required
     * @maps to
     */
    public function setTo(string $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns Type.
     * The type of message you want to send.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The type of message you want to send.
     *
     * @maps type
     * @factory \WhatsAppCloudAPILib\Models\MessageTypeEnum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Video.
     * A media object containing a video. Required when type=video.
     */
    public function getVideo(): ?Video
    {
        return $this->video;
    }

    /**
     * Sets Video.
     * A media object containing a video. Required when type=video.
     *
     * @maps video
     */
    public function setVideo(?Video $video): void
    {
        $this->video = $video;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->audio)) {
            $json['audio']          = $this->audio;
        }
        if (isset($this->contacts)) {
            $json['contacts']       = $this->contacts;
        }
        if (isset($this->document)) {
            $json['document']       = $this->document;
        }
        if (isset($this->image)) {
            $json['image']          = $this->image;
        }
        if (isset($this->interactive)) {
            $json['interactive']    = $this->interactive;
        }
        if (isset($this->location)) {
            $json['location']       = $this->location;
        }
        $json['messaging_product']  = $this->messagingProduct;
        if (isset($this->recipientType)) {
            $json['recipient_type'] = $this->recipientType;
        }
        if (isset($this->sticker)) {
            $json['sticker']        = $this->sticker;
        }
        if (isset($this->template)) {
            $json['template']       = $this->template;
        }
        if (isset($this->text)) {
            $json['text']           = $this->text;
        }
        $json['to']                 = $this->to;
        if (isset($this->type)) {
            $json['type']           = MessageTypeEnum::checkValue($this->type);
        }
        if (isset($this->video)) {
            $json['video']          = $this->video;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
