<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class BusinessProfile implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $messagingProduct;

    /**
     * @var string
     */
    private $address;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string|null
     */
    private $vertical;

    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string[]|null
     */
    private $websites;

    /**
     * @var string|null
     */
    private $profilePictureUrl;

    /**
     * @param string $id
     * @param string $messagingProduct
     * @param string $address
     * @param string $description
     */
    public function __construct(string $id, string $messagingProduct, string $address, string $description)
    {
        $this->id = $id;
        $this->messagingProduct = $messagingProduct;
        $this->address = $address;
        $this->description = $description;
    }

    /**
     * Returns Id.
     * ID of the business profile object.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * ID of the business profile object.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Messaging Product.
     * The messaging service used for the request. Always set it to "whatsapp" if you are using the
     * WhatsApp Business API.
     */
    public function getMessagingProduct(): string
    {
        return $this->messagingProduct;
    }

    /**
     * Sets Messaging Product.
     * The messaging service used for the request. Always set it to "whatsapp" if you are using the
     * WhatsApp Business API.
     *
     * @required
     * @maps messaging_product
     */
    public function setMessagingProduct(string $messagingProduct): void
    {
        $this->messagingProduct = $messagingProduct;
    }

    /**
     * Returns Address.
     * Address of the business.
     */
    public function getAddress(): string
    {
        return $this->address;
    }

    /**
     * Sets Address.
     * Address of the business.
     *
     * @required
     * @maps address
     */
    public function setAddress(string $address): void
    {
        $this->address = $address;
    }

    /**
     * Returns Description.
     * Description of the business.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description of the business.
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Vertical.
     * Industry of the business. This can be either an empty string or one of the accepted values.
     */
    public function getVertical(): ?string
    {
        return $this->vertical;
    }

    /**
     * Sets Vertical.
     * Industry of the business. This can be either an empty string or one of the accepted values.
     *
     * @maps vertical
     * @factory \WhatsAppCloudAPILib\Models\VerticalEnum::checkValue
     */
    public function setVertical(?string $vertical): void
    {
        $this->vertical = $vertical;
    }

    /**
     * Returns Email.
     * The contact email address (in valid email format) of the business.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * The contact email address (in valid email format) of the business.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Websites.
     * The URLs associated with the business. For instance, a website, Facebook Page, or Instagram. You
     * must include the http:// or https:// portion of the URL.
     *
     * @return string[]|null
     */
    public function getWebsites(): ?array
    {
        return $this->websites;
    }

    /**
     * Sets Websites.
     * The URLs associated with the business. For instance, a website, Facebook Page, or Instagram. You
     * must include the http:// or https:// portion of the URL.
     *
     * @maps websites
     *
     * @param string[]|null $websites
     */
    public function setWebsites(?array $websites): void
    {
        $this->websites = $websites;
    }

    /**
     * Returns Profile Picture Url.
     * URL of the profile picture generated from a call to the Resumable Upload API.
     */
    public function getProfilePictureUrl(): ?string
    {
        return $this->profilePictureUrl;
    }

    /**
     * Sets Profile Picture Url.
     * URL of the profile picture generated from a call to the Resumable Upload API.
     *
     * @maps profile_picture_url
     */
    public function setProfilePictureUrl(?string $profilePictureUrl): void
    {
        $this->profilePictureUrl = $profilePictureUrl;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']                      = $this->id;
        $json['messaging_product']       = $this->messagingProduct;
        $json['address']                 = $this->address;
        $json['description']             = $this->description;
        if (isset($this->vertical)) {
            $json['vertical']            = VerticalEnum::checkValue($this->vertical);
        }
        if (isset($this->email)) {
            $json['email']               = $this->email;
        }
        if (isset($this->websites)) {
            $json['websites']            = $this->websites;
        }
        if (isset($this->profilePictureUrl)) {
            $json['profile_picture_url'] = $this->profilePictureUrl;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
