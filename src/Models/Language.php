<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class Language implements \JsonSerializable
{
    /**
     * @var string
     */
    private $code;

    /**
     * @var string|null
     */
    private $policy = 'deterministic';

    /**
     * @param string $code
     */
    public function __construct(string $code)
    {
        $this->code = $code;
    }

    /**
     * Returns Code.
     * The code of the language or locale to use. Accepts both language and language_locale formats (e.g.,
     * en and en_US).
     */
    public function getCode(): string
    {
        return $this->code;
    }

    /**
     * Sets Code.
     * The code of the language or locale to use. Accepts both language and language_locale formats (e.g.,
     * en and en_US).
     *
     * @required
     * @maps code
     */
    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    /**
     * Returns Policy.
     * The language policy the message should follow.
     */
    public function getPolicy(): ?string
    {
        return $this->policy;
    }

    /**
     * Sets Policy.
     * The language policy the message should follow.
     *
     * @maps policy
     */
    public function setPolicy(?string $policy): void
    {
        $this->policy = $policy;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['code']       = $this->code;
        if (isset($this->policy)) {
            $json['policy'] = $this->policy;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
