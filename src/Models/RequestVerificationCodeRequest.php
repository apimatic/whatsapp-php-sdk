<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class RequestVerificationCodeRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $codeMethod;

    /**
     * @var string
     */
    private $locale;

    /**
     * @param string $codeMethod
     * @param string $locale
     */
    public function __construct(string $codeMethod, string $locale)
    {
        $this->codeMethod = $codeMethod;
        $this->locale = $locale;
    }

    /**
     * Returns Code Method.
     * Chosen method for verification.
     */
    public function getCodeMethod(): string
    {
        return $this->codeMethod;
    }

    /**
     * Sets Code Method.
     * Chosen method for verification.
     *
     * @required
     * @maps code_method
     * @factory \WhatsAppCloudAPILib\Models\RequestVerificationCodeMethodEnum::checkValue
     */
    public function setCodeMethod(string $codeMethod): void
    {
        $this->codeMethod = $codeMethod;
    }

    /**
     * Returns Locale.
     * Your locale. For example: "en_US".
     */
    public function getLocale(): string
    {
        return $this->locale;
    }

    /**
     * Sets Locale.
     * Your locale. For example: "en_US".
     *
     * @required
     * @maps locale
     */
    public function setLocale(string $locale): void
    {
        $this->locale = $locale;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['code_method'] = RequestVerificationCodeMethodEnum::checkValue($this->codeMethod);
        $json['locale']      = $this->locale;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
