<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class Component implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string|null
     */
    private $subType;

    /**
     * @var array[]
     */
    private $parameters;

    /**
     * @var string|null
     */
    private $index;

    /**
     * @param string $type
     * @param array[] $parameters
     */
    public function __construct(string $type, array $parameters)
    {
        $this->type = $type;
        $this->parameters = $parameters;
    }

    /**
     * Returns Type.
     * Describes the component type. For text-based templates, we only support the type=body.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Describes the component type. For text-based templates, we only support the type=body.
     *
     * @required
     * @maps type
     * @factory \WhatsAppCloudAPILib\Models\ComponentTypeEnum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Sub Type.
     * Required when type=button. Not used for the other types. Type of button to create.
     */
    public function getSubType(): ?string
    {
        return $this->subType;
    }

    /**
     * Sets Sub Type.
     * Required when type=button. Not used for the other types. Type of button to create.
     *
     * @maps sub_type
     * @factory \WhatsAppCloudAPILib\Models\SubTypeEnum::checkValue
     */
    public function setSubType(?string $subType): void
    {
        $this->subType = $subType;
    }

    /**
     * Returns Parameters.
     * Required when type=button. Array of parameter objects with the content of the message. For
     * components of type=button, see the button parameter object.
     *
     * @return array[]
     */
    public function getParameters(): array
    {
        return $this->parameters;
    }

    /**
     * Sets Parameters.
     * Required when type=button. Array of parameter objects with the content of the message. For
     * components of type=button, see the button parameter object.
     *
     * @required
     * @maps parameters
     *
     * @param array[] $parameters
     */
    public function setParameters(array $parameters): void
    {
        $this->parameters = $parameters;
    }

    /**
     * Returns Index.
     * Required when type=button. Not used for the other types. Position index of the button. You can have
     * up to 3 buttons using index values of 0 to 2.
     */
    public function getIndex(): ?string
    {
        return $this->index;
    }

    /**
     * Sets Index.
     * Required when type=button. Not used for the other types. Position index of the button. You can have
     * up to 3 buttons using index values of 0 to 2.
     *
     * @maps index
     */
    public function setIndex(?string $index): void
    {
        $this->index = $index;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']         = ComponentTypeEnum::checkValue($this->type);
        if (isset($this->subType)) {
            $json['sub_type'] = SubTypeEnum::checkValue($this->subType);
        }
        $json['parameters']   = $this->parameters;
        if (isset($this->index)) {
            $json['index']    = $this->index;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
