<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Models;

use stdClass;

class UploadMediaRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $messagingProduct;

    /**
     * @var string
     */
    private $file;

    /**
     * @var string
     */
    private $type;

    /**
     * @param string $messagingProduct
     * @param string $file
     * @param string $type
     */
    public function __construct(string $messagingProduct, string $file, string $type)
    {
        $this->messagingProduct = $messagingProduct;
        $this->file = $file;
        $this->type = $type;
    }

    /**
     * Returns Messaging Product.
     * Messaging service used for the request. In this case, use whatsapp.
     */
    public function getMessagingProduct(): string
    {
        return $this->messagingProduct;
    }

    /**
     * Sets Messaging Product.
     * Messaging service used for the request. In this case, use whatsapp.
     *
     * @required
     * @maps messaging_product
     */
    public function setMessagingProduct(string $messagingProduct): void
    {
        $this->messagingProduct = $messagingProduct;
    }

    /**
     * Returns File.
     * Path to the file stored in your local directory. For example: "@/local/path/file.jpg".
     */
    public function getFile(): string
    {
        return $this->file;
    }

    /**
     * Sets File.
     * Path to the file stored in your local directory. For example: "@/local/path/file.jpg".
     *
     * @required
     * @maps file
     */
    public function setFile(string $file): void
    {
        $this->file = $file;
    }

    /**
     * Returns Type.
     * Type of media file being uploaded. See Supported Media Types for more information.
     *
     * Supported options for images are: `image/jpeg`, `image/png`
     *
     * Supported options for documents are: `text/plain`, `application/pdf`, `application/vnd.ms-
     * powerpoint`, `application/msword`, `application/vnd.ms-excel`, `application/vnd.openxmlformats-
     * officedocument.wordprocessingml.document`, `application/vnd.openxmlformats-officedocument.
     * presentationml.presentation`, `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     * Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`, `audio/ogg`,
     * `audio/opus`
     *
     * Supported options for video are: `video/mp4`, `video/3gp`
     *
     * Supported options for stickers are: `image/webp`
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type of media file being uploaded. See Supported Media Types for more information.
     *
     * Supported options for images are: `image/jpeg`, `image/png`
     *
     * Supported options for documents are: `text/plain`, `application/pdf`, `application/vnd.ms-
     * powerpoint`, `application/msword`, `application/vnd.ms-excel`, `application/vnd.openxmlformats-
     * officedocument.wordprocessingml.document`, `application/vnd.openxmlformats-officedocument.
     * presentationml.presentation`, `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     * Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`, `audio/ogg`,
     * `audio/opus`
     *
     * Supported options for video are: `video/mp4`, `video/3gp`
     *
     * Supported options for stickers are: `image/webp`
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['messaging_product'] = $this->messagingProduct;
        $json['file']              = $this->file;
        $json['type']              = $this->type;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
